input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }

        repeat-delay 200
        repeat-rate 30
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        accel-speed 0.2
        accel-profile "adaptive"
    }

    mouse {
        // natural-scroll
        accel-speed -0.5
        accel-profile "flat"
    }

    // warp-mouse-to-focus

    focus-follows-mouse
}

output "HDMI-A-1" {
    mode "1920x1080@143.912"
    variable-refresh-rate on-demand=true
    scale 1.00
    transform "normal"
    position x=0 y=0
}

output "DP-1" {
    mode "1920x1080@143.912"
    variable-refresh-rate on-demand=true
    scale 1.00
    transform "normal"
    position x=0 y=0
}

layout {
    gaps 20

    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.4; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    focus-ring {
        off

        width 2
        active-color "#017E7E"
        inactive-color "#0C3135"
        // active-gradient from="#0082c8" to="#26D0CE" angle=45
        // inactive-gradient from="#505050" to="#808080" angle=45
        // inactive-color "#24273a"
    }

    border {
        // off

        width 2
        active-color "#FFFFFF"
        inactive-color "#333448"
    }

    insert-hint {
        // off
        color "#ffc87f80"
        // gradient from="#ffbb6680" to="#ffc88080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        left 80
        right 80
        top 10
        bottom 20
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
spawn-at-startup "wlsunset"
spawn-at-startup "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
spawn-at-startup "mako"
spawn-at-startup "udiskie"
spawn-at-startup "fcitx5" "-rd"
spawn-at-startup "swayosd-server"
spawn-at-startup "swww-daemon"
spawn-at-startup "wl-paste" "--watch" "clapboard" "store"
spawn-at-startup "blur-wallpaper"
spawn-at-startup "pomobar"

// You can override environment variables for processes spawned by niri.
environment {
    DISPLAY ":0" // For xwayland-satellite
    QT_QPA_PLATFORM "wayland"
    NVD_BACKEND "direct"
    GBM_BACKEND "nvidia-drm"
    __GLX_VENDOR_LIBRARY_NAME "nvidia"
    LIBVA_DRIVER_NAME "nvidia"

    // Remove a variable by using null as the value:
    // DISPLAY null
}

cursor {
    // Change the theme and size of the cursor as well as set the
    // `XCURSOR_THEME` and `XCURSOR_SIZE` env variables.
    xcursor-theme "catppuccin-frappe-blue-cursors"
    xcursor-size 20
    hide-when-typing
    // hide-after-inactive-ms 1000
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Niri %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Settings for the "Important Hotkeys" overlay.
hotkey-overlay {
    // Uncomment this line if you don't want to see the hotkey help at niri startup.
    skip-at-startup
}

// Animation settings.
animations {
    // Ucomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0

    window-close {
        duration-ms 200
        curve "linear"

        custom-shader r"
            // Example: make the window 'fall down' with slight rotation.
            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
                // For this shader, set animation curve to linear for best results.

                // Simulate an accelerated fall: square the (linear) progress.
                float progress = niri_clamped_progress * niri_clamped_progress;

                // Get our rotation pivot point coordinates at the bottom center of the window.
                vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;

                // Move the window down to simulate a fall.
                coords.y -= progress * 200.0;

                // Randomize rotation direction and maximum angle.
                float random = (niri_random_seed - 0.5) / 2.0;
                random = sign(random) - random;
                float max_angle = 0.05 * random;

                // Rotate the window around our pivot point.
                float angle = progress * max_angle;
                mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
                coords = rotate * coords;

                // Transform the coordinates back.
                coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);

                // Sample the window texture.
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                // Multiply by alpha to fade out.
                return color * (1.0 - niri_clamped_progress);
            }
        "
    }
}

window-rule {
  min-height 400
  min-width 420
}

window-rule {
    geometry-corner-radius 6
    clip-to-geometry true
}

window-rule {
    match app-id="alacritty"
    default-column-width { proportion 0.5; }
}

window-rule {
    match app-id="steam_app_*"
    open-fullscreen true
}

window-rule {
    match app-id="org.gnome.Characters"
    default-column-width { proportion 0.4; }
}

window-rule {
    match app-id="firefox"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="spotube"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="zen"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="rustdesk"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="sniffnet"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="^figma.*$"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="anytype"
    default-column-width { fixed 1425; }
    draw-border-with-background true    
}

window-rule {
    match app-id="io.github.kukuruzka165.materialgram"
    default-column-width { fixed 440; }

}

window-rule {
    match app-id="obsidian"
    default-column-width { fixed 570; }
}

window-rule {
    match app-id="vesktop"
    default-column-width { fixed 920; }
}

window-rule {
    match app-id="dev.zed.Zed"
    default-column-width { fixed 920; }
}

window-rule {
    match app-id="vlc"
    default-column-width { fixed 920; }
}

window-rule {
    match app-id="Waydroid"
    default-column-width { fixed 1256; }
}

// Floating window-rules

window-rule {
    match title="Open Folder"
    open-floating true
}

window-rule {
    match app-id="zenity"
    open-floating true
}

window-rule {
    match title="Friends List" app-id="steam"
    open-floating true
}

window-rule {
    match app-id="gcr-prompter"
    open-floating true
}

window-rule {
    match title="vesktop" app-id="vesktop"
    open-floating true
}

window-rule {
    match title="^.{0}$"
    open-floating true
}

window-rule {
    match app-id="Vesktop"
    open-floating true
}

window-rule {
    match app-id="imv"
    open-floating true
}


binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return { spawn "alacritty"; }
    Mod+D { spawn "anyrun"; }
    Mod+X { spawn "wlogout"; }

    Mod+Tab { spawn "togglebg"; }

    // Check https://cgit.freedesktop.org/xorg/proto/x11proto/tree/XF86keysym.h
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86AudioNext        allow-when-locked=true { spawn "playerctl" "next"; }
    XF86AudioPrev        allow-when-locked=true { spawn "playerctl" "previous"; }
    XF86AudioPlay        allow-when-locked=true { spawn "playerctl" "play-pause"; }

    Mod+Q { close-window; }

    Mod+Ctrl+H     { focus-monitor-left; }
    Mod+Ctrl+J     { focus-monitor-down; }
    Mod+Ctrl+K     { focus-monitor-up; }
    Mod+Ctrl+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+H { move-window-to-monitor-left; }
    Mod+Shift+Ctrl+J { move-window-to-monitor-down; }
    Mod+Shift+Ctrl+K { move-window-to-monitor-up; }
    Mod+Shift+Ctrl+L { move-window-to-monitor-right; }

    Mod+H          { focus-column-left; }
    Mod+J          { focus-window-or-workspace-down; }
    Mod+K          { focus-window-or-workspace-up; }
    Mod+L          { focus-column-right; }
    Mod+Home       { focus-column-first; }
    Mod+End        { focus-column-last; }

    Mod+Shift+H    { move-column-left; }
    Mod+Shift+J    { move-window-down-or-to-workspace-down; }
    Mod+Shift+K    { move-window-up-or-to-workspace-up; }
    Mod+Shift+L    { move-column-right; }

    Mod+I       { focus-workspace-down; }

    Mod+Shift+C { spawn "sh" "-c" "env DISPLAY=:0 xsel -ob | wl-copy"; }
    Mod+Shift+V { spawn "sh" "-c" "wl-paste -n | env DISPLAY=:0 xsel -ib"; }

    Mod+O       { focus-workspace-up; }
    Mod+Shift+I { move-workspace-down; }
    Mod+Shift+O { move-workspace-up; }

    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+TouchpadScrollUp         { focus-workspace-up; }
    Mod+TouchpadScrollDown       { focus-workspace-down; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { reset-window-height; }
    Mod+M { maximize-column; }
    Mod+F { fullscreen-window; }
    Mod+C { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    // If you want to skip the confirmation dialog, set the flag like so:
    // Mod+Shift+E { quit skip-confirmation=true; }
    Mod+Shift+E { quit; }
}
debug {
    wait-for-frame-completion-before-queueing
}
